1+1

1+2

3/2.4

3*9

a = 1

b = 2

a+b

a = "python"

print(a)

a

a = 3
if a > 1:
    print('a is greater than 1')
    

a = 1
if a > 1:
    print('a is greater than 1')

for a in [1,2,3]:
    print(a)

i = 0
while i < 3:
    i = i + 1
    print(i)


def add(a,b):   #함수 정의
    return a+b

add(3,4)

###########################################################################################
# 숫자형 ( 문단 무시가 될 수도 있으니, #을 길게 넣어서 창을 넣는다.)
###########################################################################################

# 나머지 연산자

7 % 3

3 % 7

12 % 2 #2로 나눈 나머지가 0 이면 항상 짝수

13 % 2 #2로 나눈 나머지가 1 이면 항상 홀수

 50 % 5 # 특정 수로 나눈 나머지가 0 이면 그 수의 배수이다.

20 % 5

20 % 2

7 / 4

7 // 4 # // 는 몫을 나누는 연산자.

###########################################################################################
# 문자형
###########################################################################################

"Hello World"

'Python is fun'

"""Life is too short"""

'''You need python'''

"Python's favorit food is perl"  # 큰 따옴표를 넣으면 글자로 취급한다 

Python's favorit food is perl

'Python's favorit food is perl'

'"Python is very easy." he says.'

'Python\'s favorits food is perl' # 백슬래쉬를 넣으면 무력화가 되어 정사울력된다.

"\"Python is very easy.\" he says."

multiline = "Life is too short\n You need python"

multiline

multiline = '''
Life is too short
You need python
'''

multiline

print(multiline)

head = 'Python'   #문자열 더하기
tail = 'is fun!'
head + tail

a = 'Python' #문자열 곱하기
a*2

print("="*50)
print("My program")
print("="*50)

a = 'Life is'
len(a)

a = 'Life is too short, You need Python'

a[3] # 파이썬은 0에서 시작한다. 그러므로 f가 아니라 e가 출력된다. 참고 : R프로그램에서는 1부터 시작을 한다. 자바도 0에서 시작)

a[-1] # 끝부터 센다.

a[-0] #-0은 0 이기 때문에 

a[0:4] #0부터 4 까지 출력. 0,1,2,3 (4 전까지 / 미만까지만)

a[0:3] #0부터 3 까지 출력. 0,1,2 (3 전까지 / 미만까지만)

a[0:5]

a[5:7]

a[19:] #:으로 생략하면 끝까지 출력.

a[:17] #:으로 생략하면 시작부터 인덱싱한곳까지

a[:] #전체생략하면 전체를 출력한다.

a[19:-7] #-8까지 읽는다. 뒷부분은 미만으로 읽기때문에

a = '20010331Rainy'

date = a[0:8]

date

weather = a[8:]

weather

a = "Pithon"

a[1]

a[:1]

a[2:]

a[:1]+'y'+a[2:]  #자체를 바꿀 수 없고, 잘라서 조립해서 맞는것으로 바꿀 수 있다.

"I eat %d apples." %3 # %d는 자리를 의미한다.

"I eat %d apples." %5 # %d는 자리를 의미한다.

"I eat %d apples." %10# %d는 자리를 의미한다.

"I eat %s apples." %"five" # %s 는 문자열을 자리에 넣는

number = 3
'I eat %d apples' % number

number = 10
day = "three"
'i ate %d apples. so i was sick for %s days.' %(number, day)

"%10s" %"hi" #전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 정렬하고 그 앞의 나머지는 공백으로 남기기.

"%-10sjane" %"hi"

'%0.4f' %3.42134234 #소수점으로 나타내기 (0.4의 의미:소수점 아래 4자리까지만 나타내기. )

'%10.4f' %3.42134234 #전체 10개의 길이를 확보하고, 소수점은 4자리까지.

'%10.2f' %3.42134234 #전체 10개의 길이를 확보하고, 소수점은 2자리까지.

'I eat {0} apples'.format(3)

'I eat {0} apples'.format('five')

number = 10
day = 'three'
'I ate {0} apples. so i was sick for {1} days'.format(number,day)

"I ate {number} apples. so i was sick for {day} days.".format(number=10,day=3)

"I ate {0} apples. so i was sick for {day} days.".format(10,day=3)

'{0:<10}'.format('hi')

"I ate {0} apples. so i was sick for {day} days.".format(10,day='three')

'{0:^10}'.format('hi')

a = 'hobby'
a.count('b')

a = 'Python is the best choice'

a.find('b')

a.find('k') # 존재하지 않으면 -1 이 나온다.

a = 'Life is too short'

a.index('t') #문자열의 처음 나오는 위치의 번호

','.join('abcd')

' '.join('abcd')

a = 'hi' #대문자로 나타내주기

a.upper()

a = 'HI' #소문자로 나타내주기

a.lower()

a #실제로 바뀌지는 않는다. 

a = " hi "
a.strip() #앞 뒤의 쓸 데 없는 공백을 날려준다.

a = 'Life is too short'
a.replace('Life', 'Your leg') #바꿔라, 라이프(첫번쨰)를 너의 다리(두번째)로.

a = 'Life is too short'
a.split() #문자열 나누기 split (자른 후 리스트에 넣어준다.)

b = "a:b:c:d"
b.split(':') #문자열을 나누는데 : 이라는 글자를 기준으로 잘라라. (자른 후 리스트에 넣어준다.)

######################################################################################
# 리스트
######################################################################################

# 리스트이름 = [요소1, 요소2, 요소3, 요소4 ....]  대괄호 주의

a = []
b = [1,2,3]
c = ['life','is','too','short']
d = [1,2,'Life','is']
e = [1,2,['Life','is']] #리스트 안에 리스트를 또 넣을 수 있다.

a = [1,2,3]

a[0]

a[0]+a[2]

a[-1]

a = [1,2,3,['a','b','c']] 

a[3]#문자열 리스트는 한 덩어리.

a[-1][0] #리스트 안의 리스트는 이렇게 인덱싱한다. 참고 : 삼중리스트도 있긴 하지만 많이 쓰지는 않는다. 가능하긴 하다.

a = [1,2,3,4,5]
a[0:2] #2번째는 포함하지 않는다. 2번째 미만. 중요!!

a = [1,2,3]
b = [4,5,6]
c = a+b
d = b+a

c

d

a*3

len(a)

len(b)

len(c)

len(d)

len(a*3)

a = [1,2,3]
a[2] + ('hi') #정수와 문자열은 더할 수 없다. 곱하기는 가능.

str(a[2]) +'hi' #(3을 문자열로 바꿔줘서 출력한다.)

str(a[2]) #숫자 --> 문자열로 바뀜

a = [1,2,3]

a[2]=4 #인덱스 값을 4로 바꿨더니 3이 4가 되었다.

a

del a[1]

a #인덱스 1번째 값을 지우니, 1과 4만 남았다.

a = [1,2,3,4,5]
del a[2:]
a

a = [1,2,3]
a.append(4)

a

a.append([5,6])

a

a = [1,4,3,2]
a.sort() #정렬해라
a

a = ['a','c','b']
a.reverse() #그냥 그 상태 그대로 뒤집는다. 내림차순이나 차순으로 정리해서 정렬하는게 아니다. 순서를 거꾸로 뒤집기만 한다.
a

a = ['a','c','b']
a.sort()
a.reverse()
a

a = ['a','c','b'] #한줄의 코딩으로 c,b,a 순으로 만들어보자 (나홀로숙제)
del.a[0]

a=['a','b','c']
a.index('c')

a = ['a','c','b']

